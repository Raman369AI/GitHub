{"ast":null,"code":"'use client';\n\nimport { mergeRefs } from '@chakra-ui/hooks';\nimport { isObject } from '@chakra-ui/utils';\nimport { useState, useRef, useCallback, useId } from 'react';\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useRadioGroup(props = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props;\n  const [valueState, setValue] = useState(defaultValue || \"\");\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const ref = useRef(null);\n  const focus = useCallback(() => {\n    const rootNode = ref.current;\n    if (!rootNode) return;\n    let query = `input:not(:disabled):checked`;\n    const firstEnabledAndCheckedInput = rootNode.querySelector(query);\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n    query = `input:not(:disabled)`;\n    const firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput?.focus();\n  }, []);\n  const uuid = useId();\n  const fallbackName = `radio-${uuid}`;\n  const name = nameProp || fallbackName;\n  const onChange = useCallback(eventOrValue => {\n    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp?.(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  const getRootProps = useCallback((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: mergeRefs(forwardedRef, ref),\n    role: \"radiogroup\"\n  }), []);\n  const getRadioProps = useCallback((props2 = {}, ref2 = null) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      ref: ref2,\n      name,\n      [checkedKey]: value != null ? props2.value === value : void 0,\n      onChange(event) {\n        onChange(event);\n      },\n      \"data-radiogroup\": true\n    };\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps\n  };\n}\nexport { useRadioGroup };","map":{"version":3,"names":["mergeRefs","isObject","useState","useRef","useCallback","useId","isInputEvent","value","target","useRadioGroup","props","onChange","onChangeProp","valueProp","defaultValue","name","nameProp","isDisabled","isFocusable","isNative","htmlProps","valueState","setValue","isControlled","ref","focus","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","uuid","fallbackName","eventOrValue","nextValue","String","getRootProps","props2","forwardedRef","role","getRadioProps","ref2","checkedKey","event"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/react/dist/esm/radio/use-radio-group.mjs"],"sourcesContent":["'use client';\nimport { mergeRefs } from '@chakra-ui/hooks';\nimport { isObject } from '@chakra-ui/utils';\nimport { useState, useRef, useCallback, useId } from 'react';\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useRadioGroup(props = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props;\n  const [valueState, setValue] = useState(defaultValue || \"\");\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const ref = useRef(null);\n  const focus = useCallback(() => {\n    const rootNode = ref.current;\n    if (!rootNode)\n      return;\n    let query = `input:not(:disabled):checked`;\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query\n    );\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n    query = `input:not(:disabled)`;\n    const firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput?.focus();\n  }, []);\n  const uuid = useId();\n  const fallbackName = `radio-${uuid}`;\n  const name = nameProp || fallbackName;\n  const onChange = useCallback(\n    (eventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChangeProp?.(String(nextValue));\n    },\n    [onChangeProp, isControlled]\n  );\n  const getRootProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      ...props2,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    }),\n    []\n  );\n  const getRadioProps = useCallback(\n    (props2 = {}, ref2 = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return {\n        ...props2,\n        ref: ref2,\n        name,\n        [checkedKey]: value != null ? props2.value === value : void 0,\n        onChange(event) {\n          onChange(event);\n        },\n        \"data-radiogroup\": true\n      };\n    },\n    [isNative, name, onChange, value]\n  );\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps\n  };\n}\n\nexport { useRadioGroup };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}