{"ast":null,"code":"// src/track-size.ts\nfunction trackElementSize(element, callback) {\n  if (!element) {\n    callback(void 0);\n    return;\n  }\n  callback({\n    width: element.offsetWidth,\n    height: element.offsetHeight\n  });\n  const win = element.ownerDocument.defaultView ?? window;\n  const observer = new win.ResizeObserver(entries => {\n    if (!Array.isArray(entries) || !entries.length) return;\n    const [entry] = entries;\n    let width;\n    let height;\n    if (\"borderBoxSize\" in entry) {\n      const borderSizeEntry = entry[\"borderBoxSize\"];\n      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n      width = borderSize[\"inlineSize\"];\n      height = borderSize[\"blockSize\"];\n    } else {\n      width = element.offsetWidth;\n      height = element.offsetHeight;\n    }\n    callback({\n      width,\n      height\n    });\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => observer.unobserve(element);\n}\n\n// src/track-sizes.ts\nfunction trackElementsSize(options) {\n  const {\n    getNodes,\n    observeMutation = true,\n    callback\n  } = options;\n  const cleanups = [];\n  let firstNode = null;\n  function trigger() {\n    const elements = getNodes();\n    firstNode = elements[0];\n    const fns = elements.map((element, index) => trackElementSize(element, size => {\n      callback(size, index);\n    }));\n    cleanups.push(...fns);\n  }\n  trigger();\n  if (observeMutation) {\n    const fn = trackMutation(firstNode, trigger);\n    cleanups.push(fn);\n  }\n  return () => {\n    cleanups.forEach(cleanup => {\n      cleanup?.();\n    });\n  };\n}\nfunction trackMutation(el, cb) {\n  if (!el || !el.parentElement) return;\n  const win = el.ownerDocument?.defaultView ?? window;\n  const observer = new win.MutationObserver(() => {\n    cb();\n  });\n  observer.observe(el.parentElement, {\n    childList: true\n  });\n  return () => {\n    observer.disconnect();\n  };\n}\nexport { trackElementSize, trackElementsSize };","map":{"version":3,"names":["trackElementSize","element","callback","width","offsetWidth","height","offsetHeight","win","ownerDocument","defaultView","window","observer","ResizeObserver","entries","Array","isArray","length","entry","borderSizeEntry","borderSize","observe","box","unobserve","trackElementsSize","options","getNodes","observeMutation","cleanups","firstNode","trigger","elements","fns","map","index","size","push","fn","trackMutation","forEach","cleanup","el","cb","parentElement","MutationObserver","childList","disconnect"],"sources":["/home/coder/project/reactlab/node_modules/@zag-js/element-size/src/track-size.ts","/home/coder/project/reactlab/node_modules/@zag-js/element-size/src/track-sizes.ts"],"sourcesContent":["export interface ElementSize {\n  width: number\n  height: number\n}\n\nexport type ElementSizeCallback = (size: ElementSize | undefined) => void\n\nexport function trackElementSize(element: HTMLElement | null, callback: ElementSizeCallback) {\n  if (!element) {\n    callback(undefined)\n    return\n  }\n\n  callback({ width: element.offsetWidth, height: element.offsetHeight })\n\n  const win = element.ownerDocument.defaultView ?? window\n\n  const observer = new win.ResizeObserver((entries) => {\n    if (!Array.isArray(entries) || !entries.length) return\n\n    const [entry] = entries\n    let width: number\n    let height: number\n\n    if (\"borderBoxSize\" in entry) {\n      const borderSizeEntry = entry[\"borderBoxSize\"]\n      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry\n      width = borderSize[\"inlineSize\"]\n      height = borderSize[\"blockSize\"]\n    } else {\n      width = element.offsetWidth\n      height = element.offsetHeight\n    }\n\n    callback({ width, height })\n  })\n\n  observer.observe(element, { box: \"border-box\" })\n\n  return () => observer.unobserve(element)\n}\n","import { trackElementSize, type ElementSize } from \"./track-size\"\n\nexport interface TrackElementsSizeOptions<T extends HTMLElement | null> {\n  getNodes: () => T[]\n  observeMutation?: boolean\n  callback: (size: ElementSize | undefined, index: number) => void\n}\n\nexport function trackElementsSize<T extends HTMLElement | null>(options: TrackElementsSizeOptions<T>) {\n  const { getNodes, observeMutation = true, callback } = options\n\n  const cleanups: Array<VoidFunction | undefined> = []\n\n  let firstNode: T | null = null\n\n  function trigger() {\n    const elements = getNodes()\n    firstNode = elements[0]\n    const fns = elements.map((element, index) =>\n      trackElementSize(element, (size) => {\n        callback(size, index)\n      }),\n    )\n    cleanups.push(...fns)\n  }\n\n  trigger()\n\n  if (observeMutation) {\n    const fn = trackMutation(firstNode, trigger)\n    cleanups.push(fn)\n  }\n\n  return () => {\n    cleanups.forEach((cleanup) => {\n      cleanup?.()\n    })\n  }\n}\n\nfunction trackMutation(el: HTMLElement | null, cb: () => void) {\n  if (!el || !el.parentElement) return\n  const win = el.ownerDocument?.defaultView ?? window\n  const observer = new win.MutationObserver(() => {\n    cb()\n  })\n  observer.observe(el.parentElement, { childList: true })\n  return () => {\n    observer.disconnect()\n  }\n}\n"],"mappings":";AAOO,SAASA,iBAAiBC,OAAA,EAA6BC,QAAA,EAA+B;EAC3F,IAAI,CAACD,OAAA,EAAS;IACZC,QAAA,CAAS,MAAS;IAClB;EACF;EAEAA,QAAA,CAAS;IAAEC,KAAA,EAAOF,OAAA,CAAQG,WAAA;IAAaC,MAAA,EAAQJ,OAAA,CAAQK;EAAa,CAAC;EAErE,MAAMC,GAAA,GAAMN,OAAA,CAAQO,aAAA,CAAcC,WAAA,IAAeC,MAAA;EAEjD,MAAMC,QAAA,GAAW,IAAIJ,GAAA,CAAIK,cAAA,CAAgBC,OAAA,IAAY;IACnD,IAAI,CAACC,KAAA,CAAMC,OAAA,CAAQF,OAAO,KAAK,CAACA,OAAA,CAAQG,MAAA,EAAQ;IAEhD,MAAM,CAACC,KAAK,IAAIJ,OAAA;IAChB,IAAIV,KAAA;IACJ,IAAIE,MAAA;IAEJ,IAAI,mBAAmBY,KAAA,EAAO;MAC5B,MAAMC,eAAA,GAAkBD,KAAA,CAAM,eAAe;MAC7C,MAAME,UAAA,GAAaL,KAAA,CAAMC,OAAA,CAAQG,eAAe,IAAIA,eAAA,CAAgB,CAAC,IAAIA,eAAA;MACzEf,KAAA,GAAQgB,UAAA,CAAW,YAAY;MAC/Bd,MAAA,GAASc,UAAA,CAAW,WAAW;IACjC,OAAO;MACLhB,KAAA,GAAQF,OAAA,CAAQG,WAAA;MAChBC,MAAA,GAASJ,OAAA,CAAQK,YAAA;IACnB;IAEAJ,QAAA,CAAS;MAAEC,KAAA;MAAOE;IAAO,CAAC;EAC5B,CAAC;EAEDM,QAAA,CAASS,OAAA,CAAQnB,OAAA,EAAS;IAAEoB,GAAA,EAAK;EAAa,CAAC;EAE/C,OAAO,MAAMV,QAAA,CAASW,SAAA,CAAUrB,OAAO;AACzC;;;AChCO,SAASsB,kBAAgDC,OAAA,EAAsC;EACpG,MAAM;IAAEC,QAAA;IAAUC,eAAA,GAAkB;IAAMxB;EAAS,IAAIsB,OAAA;EAEvD,MAAMG,QAAA,GAA4C,EAAC;EAEnD,IAAIC,SAAA,GAAsB;EAE1B,SAASC,QAAA,EAAU;IACjB,MAAMC,QAAA,GAAWL,QAAA,CAAS;IAC1BG,SAAA,GAAYE,QAAA,CAAS,CAAC;IACtB,MAAMC,GAAA,GAAMD,QAAA,CAASE,GAAA,CAAI,CAAC/B,OAAA,EAASgC,KAAA,KACjCjC,gBAAA,CAAiBC,OAAA,EAAUiC,IAAA,IAAS;MAClChC,QAAA,CAASgC,IAAA,EAAMD,KAAK;IACtB,CAAC,CACH;IACAN,QAAA,CAASQ,IAAA,CAAK,GAAGJ,GAAG;EACtB;EAEAF,OAAA,CAAQ;EAER,IAAIH,eAAA,EAAiB;IACnB,MAAMU,EAAA,GAAKC,aAAA,CAAcT,SAAA,EAAWC,OAAO;IAC3CF,QAAA,CAASQ,IAAA,CAAKC,EAAE;EAClB;EAEA,OAAO,MAAM;IACXT,QAAA,CAASW,OAAA,CAASC,OAAA,IAAY;MAC5BA,OAAA,GAAU;IACZ,CAAC;EACH;AACF;AAEA,SAASF,cAAcG,EAAA,EAAwBC,EAAA,EAAgB;EAC7D,IAAI,CAACD,EAAA,IAAM,CAACA,EAAA,CAAGE,aAAA,EAAe;EAC9B,MAAMnC,GAAA,GAAMiC,EAAA,CAAGhC,aAAA,EAAeC,WAAA,IAAeC,MAAA;EAC7C,MAAMC,QAAA,GAAW,IAAIJ,GAAA,CAAIoC,gBAAA,CAAiB,MAAM;IAC9CF,EAAA,CAAG;EACL,CAAC;EACD9B,QAAA,CAASS,OAAA,CAAQoB,EAAA,CAAGE,aAAA,EAAe;IAAEE,SAAA,EAAW;EAAK,CAAC;EACtD,OAAO,MAAM;IACXjC,QAAA,CAASkC,UAAA,CAAW;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}