{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { withEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\nconst noop = () => {};\nconst useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nconst ColorModeProvider = withEmotionCache(function ColorModeProvider2(props, cache) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange,\n    nonce: cache?.nonce\n  }), [disableTransitionOnChange, cache?.nonce]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value ?? resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n});\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"names":["jsx","isBrowser","withEmotionCache","useLayoutEffect","useEffect","useState","useMemo","useCallback","ColorModeContext","getColorModeUtils","localStorageManager","noop","useSafeLayoutEffect","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","ColorModeProvider2","props","cache","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","preventTransition","nonce","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","Provider","displayName","DarkMode","LightMode"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/react/dist/esm/color-mode/color-mode-provider.mjs"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { withEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\n\nconst noop = () => {\n};\nconst useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nconst ColorModeProvider = withEmotionCache(function ColorModeProvider2(props, cache) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(\n    () => getTheme(colorModeManager, defaultColorMode)\n  );\n  const [resolvedColorMode, setResolvedColorMode] = useState(\n    () => getTheme(colorModeManager)\n  );\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({\n      preventTransition: disableTransitionOnChange,\n      nonce: cache?.nonce\n    }),\n    [disableTransitionOnChange, cache?.nonce]\n  );\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(\n    (value2) => {\n      const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n      rawSetColorMode(resolved);\n      setClassName(resolved === \"dark\");\n      setDataset(resolved);\n      colorModeManager.set(resolved);\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset]\n  );\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode)\n      return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value]\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, children });\n});\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nLightMode.displayName = \"LightMode\";\n\nexport { ColorModeProvider, DarkMode, LightMode };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}