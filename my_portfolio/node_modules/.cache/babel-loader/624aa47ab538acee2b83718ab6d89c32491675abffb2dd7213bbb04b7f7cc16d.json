{"ast":null,"code":"import { isObject } from './is.mjs';\nfunction getLastItem(array) {\n  const length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\nfunction px(value) {\n  if (value == null) return value;\n  const {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || typeof value === \"number\" ? `${value}px` : value;\n}\nconst sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nconst sortBps = breakpoints => Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\nfunction normalize(breakpoints) {\n  const sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n  const value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\nfunction subtract(value) {\n  if (!value) return value;\n  value = px(value) ?? value;\n  const OFFSET = -0.02;\n  return typeof value === \"number\" ? `${value + OFFSET}` : value.replace(/(\\d+\\.?\\d*)/u, m => `${parseFloat(m) + OFFSET}`);\n}\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min) query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max) query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints) {\n  if (!breakpoints) return null;\n  breakpoints.base = breakpoints.base ?? \"0px\";\n  const normalized = normalize(breakpoints);\n  const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {\n    let [, maxW] = entry[index + 1] ?? [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n  const _keys = keys(breakpoints);\n  const _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every(key => _keys.has(key));\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    get(key) {\n      return queries.find(q => q.breakpoint === key);\n    },\n    media: [null, ...normalized.map(minW => toMediaQueryString(minW)).slice(1)],\n    /**\n     * Converts the object responsive syntax to array syntax\n     *\n     * @example\n     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]\n     */\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      const result = _keysArr.map(bp => test[bp] ?? null);\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    /**\n     * Converts the array responsive syntax to object syntax\n     *\n     * @example\n     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }\n     */\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n  };\n}\nexport { analyzeBreakpoints, px, toMediaQueryString };","map":{"version":3,"names":["isObject","getLastItem","array","length","analyzeCSSValue","value","num","parseFloat","toString","unit","replace","String","unitless","px","sortByBreakpointValue","a","b","parseInt","sortBps","breakpoints","Object","fromEntries","entries","sort","normalize","sorted","assign","values","keys","Set","subtract","OFFSET","m","toMediaQueryString","min","max","query","push","join","analyzeBreakpoints","base","normalized","queries","map","breakpoint","minW","index","entry","maxW","_minW","maxWQuery","minWQuery","minMaxQuery","_keys","_keysArr","Array","from","isResponsive","test","keys2","every","key","has","asObject","asArray","details","get","find","q","media","slice","toArrayValue","Error","result","bp","pop","toObjectValue","isArray","reduce","acc"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/utils/dist/esm/breakpoint.mjs"],"sourcesContent":["import { isObject } from './is.mjs';\n\nfunction getLastItem(array) {\n  const length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return { unitless: !unit, value: num, unit };\n}\nfunction px(value) {\n  if (value == null)\n    return value;\n  const { unitless } = analyzeCSSValue(value);\n  return unitless || typeof value === \"number\" ? `${value}px` : value;\n}\nconst sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nconst sortBps = (breakpoints) => Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\nfunction normalize(breakpoints) {\n  const sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n  const value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\nfunction subtract(value) {\n  if (!value)\n    return value;\n  value = px(value) ?? value;\n  const OFFSET = -0.02;\n  return typeof value === \"number\" ? `${value + OFFSET}` : value.replace(/(\\d+\\.?\\d*)/u, (m) => `${parseFloat(m) + OFFSET}`);\n}\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min)\n    query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max)\n    query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints) {\n  if (!breakpoints)\n    return null;\n  breakpoints.base = breakpoints.base ?? \"0px\";\n  const normalized = normalize(breakpoints);\n  const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {\n    let [, maxW] = entry[index + 1] ?? [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n  const _keys = keys(breakpoints);\n  const _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every((key) => _keys.has(key));\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    get(key) {\n      return queries.find((q) => q.breakpoint === key);\n    },\n    media: [\n      null,\n      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)\n    ],\n    /**\n     * Converts the object responsive syntax to array syntax\n     *\n     * @example\n     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]\n     */\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      const result = _keysArr.map((bp) => test[bp] ?? null);\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    /**\n     * Converts the array responsive syntax to object syntax\n     *\n     * @example\n     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }\n     */\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce(\n        (acc, value, index) => {\n          const key = _keysArr[index];\n          if (key != null && value != null)\n            acc[key] = value;\n          return acc;\n        },\n        {}\n      );\n    }\n  };\n}\n\nexport { analyzeBreakpoints, px, toMediaQueryString };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}