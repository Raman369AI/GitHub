{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from './use-callback-ref.mjs';\nimport { useState, useId, useCallback } from 'react';\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp ?? `disclosure-${uid}`;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose?.();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen?.();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps(props2 = {}) {\n    return {\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props2.onClick?.(event);\n        onToggle();\n      }\n    };\n  }\n  function getDisclosureProps(props2 = {}) {\n    return {\n      ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\nexport { useDisclosure };","map":{"version":3,"names":["useCallbackRef","useState","useId","useCallback","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","handleOpen","handleClose","isOpenState","setIsOpen","defaultIsOpen","isControlled","uid","onToggle","getButtonProps","props2","onClick","event","getDisclosureProps","hidden"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/hooks/dist/esm/use-disclosure.mjs"],"sourcesContent":["'use client';\nimport { useCallbackRef } from './use-callback-ref.mjs';\nimport { useState, useId, useCallback } from 'react';\n\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp ?? `disclosure-${uid}`;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose?.();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen?.();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps(props2 = {}) {\n    return {\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props2.onClick?.(event);\n        onToggle();\n      }\n    };\n  }\n  function getDisclosureProps(props2 = {}) {\n    return {\n      ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\n\nexport { useDisclosure };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,QAAQ,EAAEC,KAAK,EAAEC,WAAW,QAAQ,OAAO;AAEpD,SAASC,aAAaA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAE;EACjC,MAAM;IACJC,OAAO,EAAEC,WAAW;IACpBC,MAAM,EAAEC,UAAU;IAClBC,MAAM,EAAEC,UAAU;IAClBC,EAAE,EAAEC;EACN,CAAC,GAAGR,KAAK;EACT,MAAMS,UAAU,GAAGd,cAAc,CAACS,UAAU,CAAC;EAC7C,MAAMM,WAAW,GAAGf,cAAc,CAACO,WAAW,CAAC;EAC/C,MAAM,CAACS,WAAW,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAACI,KAAK,CAACa,aAAa,IAAI,KAAK,CAAC;EACvE,MAAMR,MAAM,GAAGC,UAAU,KAAK,KAAK,CAAC,GAAGA,UAAU,GAAGK,WAAW;EAC/D,MAAMG,YAAY,GAAGR,UAAU,KAAK,KAAK,CAAC;EAC1C,MAAMS,GAAG,GAAGlB,KAAK,CAAC,CAAC;EACnB,MAAMU,EAAE,GAAGC,MAAM,IAAI,cAAcO,GAAG,EAAE;EACxC,MAAMd,OAAO,GAAGH,WAAW,CAAC,MAAM;IAChC,IAAI,CAACgB,YAAY,EAAE;MACjBF,SAAS,CAAC,KAAK,CAAC;IAClB;IACAF,WAAW,GAAG,CAAC;EACjB,CAAC,EAAE,CAACI,YAAY,EAAEJ,WAAW,CAAC,CAAC;EAC/B,MAAMP,MAAM,GAAGL,WAAW,CAAC,MAAM;IAC/B,IAAI,CAACgB,YAAY,EAAE;MACjBF,SAAS,CAAC,IAAI,CAAC;IACjB;IACAH,UAAU,GAAG,CAAC;EAChB,CAAC,EAAE,CAACK,YAAY,EAAEL,UAAU,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAGlB,WAAW,CAAC,MAAM;IACjC,IAAIO,MAAM,EAAE;MACVJ,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLE,MAAM,CAAC,CAAC;IACV;EACF,CAAC,EAAE,CAACE,MAAM,EAAEF,MAAM,EAAEF,OAAO,CAAC,CAAC;EAC7B,SAASgB,cAAcA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACnC,OAAO;MACL,GAAGA,MAAM;MACT,eAAe,EAAEb,MAAM;MACvB,eAAe,EAAEE,EAAE;MACnBY,OAAOA,CAACC,KAAK,EAAE;QACbF,MAAM,CAACC,OAAO,GAAGC,KAAK,CAAC;QACvBJ,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC;EACH;EACA,SAASK,kBAAkBA,CAACH,MAAM,GAAG,CAAC,CAAC,EAAE;IACvC,OAAO;MACL,GAAGA,MAAM;MACTI,MAAM,EAAE,CAACjB,MAAM;MACfE;IACF,CAAC;EACH;EACA,OAAO;IACLF,MAAM;IACNF,MAAM;IACNF,OAAO;IACPe,QAAQ;IACRF,YAAY;IACZG,cAAc;IACdI;EACF,CAAC;AACH;AAEA,SAAStB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}