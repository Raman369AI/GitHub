{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { omit } from '@chakra-ui/utils';\nimport { NativeImage } from './native-image.mjs';\nimport { useImage, shouldShowFallbackImage } from './use-image.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst Image = forwardRef(function Image2(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null ||\n  // use can opt out of fallback image\n  ignoreFallback ||\n  // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]))\n  };\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return /* @__PURE__ */jsx(chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n  return /* @__PURE__ */jsx(chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage.displayName = \"Image\";\nexport { Image };","map":{"version":3,"names":["jsx","omit","NativeImage","useImage","shouldShowFallbackImage","forwardRef","chakra","Image","Image2","props","ref","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","rest","providedFallback","shouldIgnoreFallbackImage","status","showFallbackImage","shared","objectFit","objectPosition","img","as","className","displayName"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/react/dist/esm/image/image.mjs"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omit } from '@chakra-ui/utils';\nimport { NativeImage } from './native-image.mjs';\nimport { useImage, shouldShowFallbackImage } from './use-image.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Image = forwardRef(function Image2(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image\n  ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])\n  };\n  if (showFallbackImage) {\n    if (fallback)\n      return fallback;\n    return /* @__PURE__ */ jsx(\n      chakra.img,\n      {\n        as: NativeImage,\n        className: \"chakra-image__placeholder\",\n        src: fallbackSrc,\n        ...shared\n      }\n    );\n  }\n  return /* @__PURE__ */ jsx(\n    chakra.img,\n    {\n      as: NativeImage,\n      src,\n      srcSet,\n      crossOrigin,\n      loading,\n      referrerPolicy,\n      className: \"chakra-image\",\n      ...shared\n    }\n  );\n});\nImage.displayName = \"Image\";\n\nexport { Image };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,QAAQ,EAAEC,uBAAuB,QAAQ,iBAAiB;AACnE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,MAAM,QAAQ,uBAAuB;AAE9C,MAAMC,KAAK,GAAGF,UAAU,CAAC,SAASG,MAAMA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACnD,MAAM;IACJC,WAAW;IACXC,QAAQ;IACRC,GAAG;IACHC,MAAM;IACNC,KAAK;IACLC,GAAG;IACHC,OAAO;IACPC,cAAc;IACdC,WAAW;IACXC,gBAAgB,GAAG,mBAAmB;IACtCC,cAAc;IACd,GAAGC;EACL,CAAC,GAAGb,KAAK;EACT,MAAMc,gBAAgB,GAAGZ,WAAW,KAAK,KAAK,CAAC,IAAIC,QAAQ,KAAK,KAAK,CAAC;EACtE,MAAMY,yBAAyB,GAAGP,OAAO,IAAI,IAAI;EAAI;EACrDC,cAAc;EAAI;EAClB,CAACK,gBAAgB;EACjB,MAAME,MAAM,GAAGtB,QAAQ,CAAC;IACtB,GAAGM,KAAK;IACRU,WAAW;IACXD,cAAc,EAAEM;EAClB,CAAC,CAAC;EACF,MAAME,iBAAiB,GAAGtB,uBAAuB,CAACqB,MAAM,EAAEL,gBAAgB,CAAC;EAC3E,MAAMO,MAAM,GAAG;IACbjB,GAAG;IACHkB,SAAS,EAAEZ,GAAG;IACda,cAAc,EAAEd,KAAK;IACrB,IAAGS,yBAAyB,GAAGF,IAAI,GAAGrB,IAAI,CAACqB,IAAI,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;EACzE,CAAC;EACD,IAAII,iBAAiB,EAAE;IACrB,IAAId,QAAQ,EACV,OAAOA,QAAQ;IACjB,OAAO,eAAgBZ,GAAG,CACxBM,MAAM,CAACwB,GAAG,EACV;MACEC,EAAE,EAAE7B,WAAW;MACf8B,SAAS,EAAE,2BAA2B;MACtCnB,GAAG,EAAEF,WAAW;MAChB,GAAGgB;IACL,CACF,CAAC;EACH;EACA,OAAO,eAAgB3B,GAAG,CACxBM,MAAM,CAACwB,GAAG,EACV;IACEC,EAAE,EAAE7B,WAAW;IACfW,GAAG;IACHC,MAAM;IACNK,WAAW;IACXF,OAAO;IACPI,cAAc;IACdW,SAAS,EAAE,cAAc;IACzB,GAAGL;EACL,CACF,CAAC;AACH,CAAC,CAAC;AACFpB,KAAK,CAAC0B,WAAW,GAAG,OAAO;AAE3B,SAAS1B,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}