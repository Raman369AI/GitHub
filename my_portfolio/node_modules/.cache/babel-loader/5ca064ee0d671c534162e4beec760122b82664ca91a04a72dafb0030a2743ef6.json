{"ast":null,"code":"'use client';\n\nimport { isMultiTouchEvent, getEventPoint, addPointerEvent } from '@chakra-ui/utils';\nimport sync, { getFrameData, cancelSync } from 'framesync';\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass PanEvent {\n  constructor(event, handlers, threshold) {\n    /**\n     * We use this to keep track of the `x` and `y` pan session history\n     * as the pan event happens. It helps to calculate the `offset` and `delta`\n     */\n    __publicField(this, \"history\", []);\n    // The pointer event that started the pan session\n    __publicField(this, \"startEvent\", null);\n    // The current pointer event for the pan session\n    __publicField(this, \"lastEvent\", null);\n    // The current pointer event info for the pan session\n    __publicField(this, \"lastEventInfo\", null);\n    __publicField(this, \"handlers\", {});\n    __publicField(this, \"removeListeners\", () => {});\n    /**\n     * Minimal pan distance required before recognizing the pan.\n     * @default \"3px\"\n     */\n    __publicField(this, \"threshold\", 3);\n    __publicField(this, \"win\");\n    __publicField(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      const info = getPanInfo(this.lastEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      const isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      const {\n        timestamp\n      } = getFrameData();\n      this.history.push({\n        ...info.point,\n        timestamp\n      });\n      const {\n        onStart,\n        onMove\n      } = this.handlers;\n      if (!isPanStarted) {\n        onStart?.(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n      onMove?.(this.lastEvent, info);\n    });\n    __publicField(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info;\n      sync.update(this.updatePoint, true);\n    });\n    __publicField(this, \"onPointerUp\", (event, info) => {\n      const panInfo = getPanInfo(info, this.history);\n      const {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      onSessionEnd?.(event, panInfo);\n      this.end();\n      if (!onEnd || !this.startEvent) return;\n      onEnd?.(event, panInfo);\n    });\n    this.win = event.view ?? window;\n    if (isMultiTouchEvent(event)) return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    const info = {\n      point: getEventPoint(event)\n    };\n    const {\n      timestamp\n    } = getFrameData();\n    this.history = [{\n      ...info.point,\n      timestamp\n    }];\n    const {\n      onSessionStart\n    } = handlers;\n    onSessionStart?.(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    this.removeListeners?.();\n    cancelSync.update(this.updatePoint);\n  }\n}\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nconst toMilliseconds = v => v * 1e3;\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = history[history.length - 1];\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nfunction pipe(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\nfunction distance1D(a, b) {\n  return Math.abs(a - b);\n}\nfunction isPoint(point) {\n  return \"x\" in point && \"y\" in point;\n}\nfunction distance(a, b) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b);\n  }\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n  return 0;\n}\nexport { PanEvent, distance };","map":{"version":3,"names":["isMultiTouchEvent","getEventPoint","addPointerEvent","sync","getFrameData","cancelSync","__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","PanEvent","constructor","event","handlers","threshold","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","distance","offset","x","y","timestamp","push","point","onStart","onMove","update","updatePoint","panInfo","onEnd","onSessionEnd","end","win","view","window","stopPropagation","preventDefault","onSessionStart","removeListeners","pipe","onPointerMove","onPointerUp","updateHandlers","subtract","a","b","delta","length","velocity","getVelocity","toMilliseconds","v","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","fns","reduce","distance1D","Math","abs","isPoint","xDelta","yDelta","sqrt"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/hooks/dist/esm/use-pan-event/pan-event.mjs"],"sourcesContent":["'use client';\nimport { isMultiTouchEvent, getEventPoint, addPointerEvent } from '@chakra-ui/utils';\nimport sync, { getFrameData, cancelSync } from 'framesync';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass PanEvent {\n  constructor(event, handlers, threshold) {\n    /**\n     * We use this to keep track of the `x` and `y` pan session history\n     * as the pan event happens. It helps to calculate the `offset` and `delta`\n     */\n    __publicField(this, \"history\", []);\n    // The pointer event that started the pan session\n    __publicField(this, \"startEvent\", null);\n    // The current pointer event for the pan session\n    __publicField(this, \"lastEvent\", null);\n    // The current pointer event info for the pan session\n    __publicField(this, \"lastEventInfo\", null);\n    __publicField(this, \"handlers\", {});\n    __publicField(this, \"removeListeners\", () => {\n    });\n    /**\n     * Minimal pan distance required before recognizing the pan.\n     * @default \"3px\"\n     */\n    __publicField(this, \"threshold\", 3);\n    __publicField(this, \"win\");\n    __publicField(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo))\n        return;\n      const info = getPanInfo(this.lastEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      const isDistancePastThreshold = distance(info.offset, { x: 0, y: 0 }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold)\n        return;\n      const { timestamp } = getFrameData();\n      this.history.push({ ...info.point, timestamp });\n      const { onStart, onMove } = this.handlers;\n      if (!isPanStarted) {\n        onStart?.(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n      onMove?.(this.lastEvent, info);\n    });\n    __publicField(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info;\n      sync.update(this.updatePoint, true);\n    });\n    __publicField(this, \"onPointerUp\", (event, info) => {\n      const panInfo = getPanInfo(info, this.history);\n      const { onEnd, onSessionEnd } = this.handlers;\n      onSessionEnd?.(event, panInfo);\n      this.end();\n      if (!onEnd || !this.startEvent)\n        return;\n      onEnd?.(event, panInfo);\n    });\n    this.win = event.view ?? window;\n    if (isMultiTouchEvent(event))\n      return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    const info = { point: getEventPoint(event) };\n    const { timestamp } = getFrameData();\n    this.history = [{ ...info.point, timestamp }];\n    const { onSessionStart } = handlers;\n    onSessionStart?.(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp)\n    );\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    this.removeListeners?.();\n    cancelSync.update(this.updatePoint);\n  }\n}\nfunction subtract(a, b) {\n  return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nconst toMilliseconds = (v) => v * 1e3;\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return { x: 0, y: 0 };\n  }\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = history[history.length - 1];\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 };\n  }\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n  if (time === 0) {\n    return { x: 0, y: 0 };\n  }\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nfunction pipe(...fns) {\n  return (v) => fns.reduce((a, b) => b(a), v);\n}\nfunction distance1D(a, b) {\n  return Math.abs(a - b);\n}\nfunction isPoint(point) {\n  return \"x\" in point && \"y\" in point;\n}\nfunction distance(a, b) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b);\n  }\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n  return 0;\n}\n\nexport { PanEvent, distance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}