{"ast":null,"code":"function anatomy(name, map = {}) {\n  let called = false;\n  function assert() {\n    if (!called) {\n      called = true;\n      return;\n    }\n    throw new Error(\"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\");\n  }\n  function parts(...values) {\n    assert();\n    for (const part of values) {\n      map[part] = toPart(part);\n    }\n    return anatomy(name, map);\n  }\n  function extend(...parts2) {\n    for (const part of parts2) {\n      if (part in map) continue;\n      map[part] = toPart(part);\n    }\n    return anatomy(name, map);\n  }\n  function selectors() {\n    const value = Object.fromEntries(Object.entries(map).map(([key, part]) => [key, part.selector]));\n    return value;\n  }\n  function classnames() {\n    const value = Object.fromEntries(Object.entries(map).map(([key, part]) => [key, part.className]));\n    return value;\n  }\n  function toPart(part) {\n    const el = [\"container\", \"root\"].includes(part ?? \"\") ? [name] : [name, part];\n    const attr = el.filter(Boolean).join(\"__\");\n    const className = `chakra-${attr}`;\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part\n    };\n    return partObj;\n  }\n  const __type = {};\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys() {\n      return Object.keys(map);\n    },\n    __type\n  };\n}\nexport { anatomy };","map":{"version":3,"names":["anatomy","name","map","called","assert","Error","parts","values","part","toPart","extend","parts2","selectors","value","Object","fromEntries","entries","key","selector","classnames","className","el","includes","attr","filter","Boolean","join","partObj","toString","__type","keys"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/anatomy/dist/esm/create-anatomy.mjs"],"sourcesContent":["function anatomy(name, map = {}) {\n  let called = false;\n  function assert() {\n    if (!called) {\n      called = true;\n      return;\n    }\n    throw new Error(\n      \"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\"\n    );\n  }\n  function parts(...values) {\n    assert();\n    for (const part of values) {\n      map[part] = toPart(part);\n    }\n    return anatomy(name, map);\n  }\n  function extend(...parts2) {\n    for (const part of parts2) {\n      if (part in map)\n        continue;\n      map[part] = toPart(part);\n    }\n    return anatomy(name, map);\n  }\n  function selectors() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, part.selector])\n    );\n    return value;\n  }\n  function classnames() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, part.className])\n    );\n    return value;\n  }\n  function toPart(part) {\n    const el = [\"container\", \"root\"].includes(part ?? \"\") ? [name] : [name, part];\n    const attr = el.filter(Boolean).join(\"__\");\n    const className = `chakra-${attr}`;\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part\n    };\n    return partObj;\n  }\n  const __type = {};\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys() {\n      return Object.keys(map);\n    },\n    __type\n  };\n}\n\nexport { anatomy };\n"],"mappings":"AAAA,SAASA,OAAOA,CAACC,IAAI,EAAEC,GAAG,GAAG,CAAC,CAAC,EAAE;EAC/B,IAAIC,MAAM,GAAG,KAAK;EAClB,SAASC,MAAMA,CAAA,EAAG;IAChB,IAAI,CAACD,MAAM,EAAE;MACXA,MAAM,GAAG,IAAI;MACb;IACF;IACA,MAAM,IAAIE,KAAK,CACb,qFACF,CAAC;EACH;EACA,SAASC,KAAKA,CAAC,GAAGC,MAAM,EAAE;IACxBH,MAAM,CAAC,CAAC;IACR,KAAK,MAAMI,IAAI,IAAID,MAAM,EAAE;MACzBL,GAAG,CAACM,IAAI,CAAC,GAAGC,MAAM,CAACD,IAAI,CAAC;IAC1B;IACA,OAAOR,OAAO,CAACC,IAAI,EAAEC,GAAG,CAAC;EAC3B;EACA,SAASQ,MAAMA,CAAC,GAAGC,MAAM,EAAE;IACzB,KAAK,MAAMH,IAAI,IAAIG,MAAM,EAAE;MACzB,IAAIH,IAAI,IAAIN,GAAG,EACb;MACFA,GAAG,CAACM,IAAI,CAAC,GAAGC,MAAM,CAACD,IAAI,CAAC;IAC1B;IACA,OAAOR,OAAO,CAACC,IAAI,EAAEC,GAAG,CAAC;EAC3B;EACA,SAASU,SAASA,CAAA,EAAG;IACnB,MAAMC,KAAK,GAAGC,MAAM,CAACC,WAAW,CAC9BD,MAAM,CAACE,OAAO,CAACd,GAAG,CAAC,CAACA,GAAG,CAAC,CAAC,CAACe,GAAG,EAAET,IAAI,CAAC,KAAK,CAACS,GAAG,EAAET,IAAI,CAACU,QAAQ,CAAC,CAC/D,CAAC;IACD,OAAOL,KAAK;EACd;EACA,SAASM,UAAUA,CAAA,EAAG;IACpB,MAAMN,KAAK,GAAGC,MAAM,CAACC,WAAW,CAC9BD,MAAM,CAACE,OAAO,CAACd,GAAG,CAAC,CAACA,GAAG,CAAC,CAAC,CAACe,GAAG,EAAET,IAAI,CAAC,KAAK,CAACS,GAAG,EAAET,IAAI,CAACY,SAAS,CAAC,CAChE,CAAC;IACD,OAAOP,KAAK;EACd;EACA,SAASJ,MAAMA,CAACD,IAAI,EAAE;IACpB,MAAMa,EAAE,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACd,IAAI,IAAI,EAAE,CAAC,GAAG,CAACP,IAAI,CAAC,GAAG,CAACA,IAAI,EAAEO,IAAI,CAAC;IAC7E,MAAMe,IAAI,GAAGF,EAAE,CAACG,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1C,MAAMN,SAAS,GAAG,UAAUG,IAAI,EAAE;IAClC,MAAMI,OAAO,GAAG;MACdP,SAAS;MACTF,QAAQ,EAAE,IAAIE,SAAS,EAAE;MACzBQ,QAAQ,EAAEA,CAAA,KAAMpB;IAClB,CAAC;IACD,OAAOmB,OAAO;EAChB;EACA,MAAME,MAAM,GAAG,CAAC,CAAC;EACjB,OAAO;IACLvB,KAAK;IACLG,MAAM;IACNC,MAAM;IACNE,SAAS;IACTO,UAAU;IACV,IAAIW,IAAIA,CAAA,EAAG;MACT,OAAOhB,MAAM,CAACgB,IAAI,CAAC5B,GAAG,CAAC;IACzB,CAAC;IACD2B;EACF,CAAC;AACH;AAEA,SAAS7B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}