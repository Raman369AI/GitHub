{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { toCSSVar, css } from '@chakra-ui/styled-system';\nimport { createContext, memoizedGet, runIfFn } from '@chakra-ui/utils';\nimport { ThemeProvider as ThemeProvider$1, Global } from '@emotion/react';\nimport { useMemo } from 'react';\nimport { useColorMode } from '../color-mode/color-mode-context.mjs';\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(ThemeProvider$1, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\nfunction CSSVars({\n  root = \":host, :root\"\n}) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\nconst [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = memoizedGet(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\nexport { CSSVars, GlobalStyle, StylesProvider, ThemeProvider, createStylesContext, useStyles };","map":{"version":3,"names":["jsxs","jsx","toCSSVar","css","createContext","memoizedGet","runIfFn","ThemeProvider","ThemeProvider$1","Global","useMemo","useColorMode","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","selector","join","styles","__cssVars","StylesProvider","useStyles","name","errorMessage","createStylesContext","componentName","GlobalStyle","colorMode","styleObjectOrFn","globalStyles"],"sources":["/home/coder/project/reactlab/node_modules/@chakra-ui/react/dist/esm/system/providers.mjs"],"sourcesContent":["'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { toCSSVar, css } from '@chakra-ui/styled-system';\nimport { createContext, memoizedGet, runIfFn } from '@chakra-ui/utils';\nimport { ThemeProvider as ThemeProvider$1, Global } from '@emotion/react';\nimport { useMemo } from 'react';\nimport { useColorMode } from '../color-mode/color-mode-context.mjs';\n\nfunction ThemeProvider(props) {\n  const { cssVarsRoot, theme, children } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */ jsxs(ThemeProvider$1, { theme: computedTheme, children: [\n    /* @__PURE__ */ jsx(CSSVars, { root: cssVarsRoot }),\n    children\n  ] });\n}\nfunction CSSVars({ root = \":host, :root\" }) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */ jsx(Global, { styles: (theme) => ({ [selector]: theme.__cssVars }) });\n}\nconst [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const { colorMode } = useColorMode();\n  return /* @__PURE__ */ jsx(\n    Global,\n    {\n      styles: (theme) => {\n        const styleObjectOrFn = memoizedGet(theme, \"styles.global\");\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode });\n        if (!globalStyles)\n          return void 0;\n        const styles = css(globalStyles)(theme);\n        return styles;\n      }\n    }\n  );\n}\n\nexport { CSSVars, GlobalStyle, StylesProvider, ThemeProvider, createStylesContext, useStyles };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,IAAI,EAAEC,GAAG,QAAQ,mBAAmB;AAC7C,SAASC,QAAQ,EAAEC,GAAG,QAAQ,0BAA0B;AACxD,SAASC,aAAa,EAAEC,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;AACtE,SAASC,aAAa,IAAIC,eAAe,EAAEC,MAAM,QAAQ,gBAAgB;AACzE,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,YAAY,QAAQ,sCAAsC;AAEnE,SAASJ,aAAaA,CAACK,KAAK,EAAE;EAC5B,MAAM;IAAEC,WAAW;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,KAAK;EAC9C,MAAMI,aAAa,GAAGN,OAAO,CAAC,MAAMR,QAAQ,CAACY,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAC7D,OAAO,eAAgBd,IAAI,CAACQ,eAAe,EAAE;IAAEM,KAAK,EAAEE,aAAa;IAAED,QAAQ,EAAE,CAC7E,eAAgBd,GAAG,CAACgB,OAAO,EAAE;MAAEC,IAAI,EAAEL;IAAY,CAAC,CAAC,EACnDE,QAAQ;EACR,CAAC,CAAC;AACN;AACA,SAASE,OAAOA,CAAC;EAAEC,IAAI,GAAG;AAAe,CAAC,EAAE;EAC1C,MAAMC,QAAQ,GAAG,CAACD,IAAI,EAAE,cAAc,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;EACjD,OAAO,eAAgBnB,GAAG,CAACQ,MAAM,EAAE;IAAEY,MAAM,EAAGP,KAAK,KAAM;MAAE,CAACK,QAAQ,GAAGL,KAAK,CAACQ;IAAU,CAAC;EAAE,CAAC,CAAC;AAC9F;AACA,MAAM,CAACC,cAAc,EAAEC,SAAS,CAAC,GAAGpB,aAAa,CAAC;EAChDqB,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;AAChB,CAAC,CAAC;AACF,SAASC,mBAAmBA,CAACC,aAAa,EAAE;EAC1C,OAAOxB,aAAa,CAAC;IACnBqB,IAAI,EAAE,GAAGG,aAAa,eAAe;IACrCF,YAAY,EAAE,kFAAkFE,aAAa;EAC/G,CAAC,CAAC;AACJ;AACA,SAASC,WAAWA,CAAA,EAAG;EACrB,MAAM;IAAEC;EAAU,CAAC,GAAGnB,YAAY,CAAC,CAAC;EACpC,OAAO,eAAgBV,GAAG,CACxBQ,MAAM,EACN;IACEY,MAAM,EAAGP,KAAK,IAAK;MACjB,MAAMiB,eAAe,GAAG1B,WAAW,CAACS,KAAK,EAAE,eAAe,CAAC;MAC3D,MAAMkB,YAAY,GAAG1B,OAAO,CAACyB,eAAe,EAAE;QAAEjB,KAAK;QAAEgB;MAAU,CAAC,CAAC;MACnE,IAAI,CAACE,YAAY,EACf,OAAO,KAAK,CAAC;MACf,MAAMX,MAAM,GAAGlB,GAAG,CAAC6B,YAAY,CAAC,CAAClB,KAAK,CAAC;MACvC,OAAOO,MAAM;IACf;EACF,CACF,CAAC;AACH;AAEA,SAASJ,OAAO,EAAEY,WAAW,EAAEN,cAAc,EAAEhB,aAAa,EAAEoB,mBAAmB,EAAEH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}